package com.project.cinemax.controller;

import java.util.ArrayList;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.project.cinemax.model.Category;
import com.project.cinemax.model.Movie;
import com.project.cinemax.model.Ticket;
import com.project.cinemax.repository.CategoryRepository;
import com.project.cinemax.repository.MovieRepository;
import com.project.cinemax.repository.TicketRepository;
import com.project.cinemax.service.MovieService;

@RestController
@CrossOrigin
public class CinemaResController {
	
	@Autowired
	private MovieService movieService;
	
	@Autowired
	private MovieRepository movieRepository;
	
	@Autowired
	private CategoryRepository categoryRepository;

	@Autowired
	private TicketRepository ticketRepository;
	
	@GetMapping("notAuth/categories")
	public ResponseEntity<List<Category>> getAllCategories() {
		List<Category> categories = categoryRepository.findAll();
		return new ResponseEntity<>(categories, HttpStatus.OK);
	}

	@GetMapping("findMovieById/{id}")
	public Movie findMovieById(@PathVariable(name = "id") Long id) {
		return movieRepository.findById(id).orElse(null);
	}
	
//	@GetMapping("/movies")
//	public List<Movie> findMovies() {
//		return movieRepository.findAll();
//	}
	
	@GetMapping("notAuth/count")
	public ResponseEntity<Long> countItems(
			@RequestParam(required = false) String title,
			@RequestParam(defaultValue = "0") Long categoryId
			) {
		
		List<Movie> movies;
		
		movies = movieRepository.findByTitleContainingAndCategoryId(title, categoryId);
		
		Long count = (long) movies.size();
		
		return new ResponseEntity<>(moviesCount, HttpStatus.OK);
	}
	
	@GetMapping("notAuth/movies")
	public ResponseEntity<List<Movie>> getMovies(
			@RequestParam(defaultValue = "") String title,
			@RequestParam(defaultValue = "0") Long categoryId,
	        @RequestParam(defaultValue = "0") int page,
	        @RequestParam(defaultValue = "8") int size
	        ) {
		
		Pageable paging = PageRequest.of(page, size);
		Page<Movie> movies;
		
		movies = movieRepository.findByTitleContainingAndCategoryId(title, categoryId, paging);
		
		List<Movie> retVal = new ArrayList<Movie>();
		for (Movie m : movies) {
			retVal.add(m);
		}
		return new ResponseEntity<>(retVal, HttpStatus.OK);
	}
	
	

	@PostMapping("/puyTickets")
	@Transactional
	public List<Ticket> puyTickets(@RequestBody TicketFrom ticketFrom) {
		List<Ticket> tickets = new ArrayList<Ticket>();
		ticketFrom.getTickets().forEach(idTick -> {
			Ticket ticket = ticketRepository.findById(idTick).orElse(null);
			ticket.setNameClient(ticketFrom.getNameClient());
			ticket.setReserve(true);
			ticketRepository.save(ticket);
			tickets.add(ticket);
		});
		return tickets;
	}

}

class TicketFrom {

	private String nameClient;
	private int codePayement;
	private List<Long> tickets = new ArrayList<Long>();

	public String getNameClient() {
		return nameClient;
	}

	public void setNameClient(String nameClient) {
		this.nameClient = nameClient;
	}

	public List<Long> getTickets() {
		return tickets;
	}

	public void setTickets(List<Long> tickets) {
		this.tickets = tickets;
	}

	public int getCodePayement() {
		return codePayement;
	}

	public void setCodePayement(int codePayement) {
		this.codePayement = codePayement;
	}

}
